#!/usr/bin/env node
const d=async()=>{const e=(await(await import("../Function/Create.js")).default()).parse().opts(),a=new(await import("../Class/Logger.js")).default(e.Verbose?"verbose":"info");a.Verbose(),a.Param("options",e);try{const t=await(await import("../Function/Load.js")).default(e.Project),{rootDir:c,outDir:l,baseUrl:p,paths:f}=t.options??{};a.Param("compilerOptions",{rootDir:c,outDir:l,baseUrl:p,paths:f});const o=await(await import("../Function/Resolve/Path.js")).default(e,t);a.Param("Path",o);const n=await(await import("../Function/Compute.js")).default(o.Base,t?.options?.paths??{});a.Param("Alias",n);const s=await(await import("../Function/Get.js")).default(o.Target,e.Extension);a.Param("filesToProcess",s);const i=(await import("../Function/Generate.js")).default(s,n,o);a.Param("fileChanges",i.map(({File:m,Change:w})=>({file:m,changes:w}))),e.NoEmit?a.Info(r("Resolve:"),"discovered",i.length,"file(s) for change (none actually changed since --noEmit was given)"):((await import("../Function/Apply.js")).default(i),a.Info(r("Resolve:"),"changed",i.length,"file(s)"))}catch(t){if(t instanceof(await import("../Class/Error/Step.js")).default)a.Error(`Error during step '${r(t.Step)}'`,t.message);else throw t}};await d();const{bold:r}=await import("ansi-colors");export{d as _Function,r as bold};
