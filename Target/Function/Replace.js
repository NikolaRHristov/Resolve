const g=async(e,l,h)=>{try{await(await import("fs/promises")).access(e,(await import("fs/promises")).constants.F_OK)}catch{throw new(await import("../Class/Error/FileNotFound")).default(g.name,e)}const t=await(await import("fs/promises")).readFile(e,"utf-8"),i=[],n=t.match(/((?:require\(|require\.resolve\(|import\()|(?:import|export)\s+(?:[\s\S]*?from\s+)?)['"]([^'"]*)['"]\)?/g),s=n?await Promise.all(n.map(async r=>{const c=r.match(/((?:require\(|require\.resolve\(|import\()|(?:import|export)\s+(?:[\s\S]*?from\s+)?)['"]([^'"]*)['"]\)?/);if(!c)return r;const[,m,a]=c,{Original:x,Replace:o}=await(await import("./Convert")).default(a??"",e,l,h,!e.endsWith(".ts")&&(m?.includes("import")||m?.includes("export")));if(!o)return t;const p=t.lastIndexOf(a??"");return i.push({Original:u(x),Modify:u(o)}),t.substring(0,p)+o+t.substring(p+(a??"").length)})):t;return{Changed:t!==s,Text:s.toString(),Change:i}};var f=g;const{default:u}=await import("./Normalize");export{u as Normalize,g as _Function,f as default};
