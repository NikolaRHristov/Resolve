var w=(t,s,l)=>{const n=[];for(const c of t){const{changed:o,text:a,changes:r}=E(c,s,l);o&&n.push({File:c,Text:a,Change:r})}return n};function E(t,s,l){if(!F(t))throw new D(E.name,t);const n=A(t,"utf-8"),c=[],o=n.replace(X,(a,r,e)=>{const u=!t.endsWith(".ts")&&(r.includes("import")||r.includes("export")),p=$(e,t,s,l,u);if(!p.replacement)return a;const x=a.lastIndexOf(e);return c.push({Original:g(p.original),Modify:g(p.replacement)}),a.substring(0,x)+p.replacement+a.substring(x+e.length)});return{changed:n!==o,text:o,changes:c}}function $(t,s,l,{Source:n,Target:c},o){const a=m(n,I(c,s)),r=y(a),e=y(s),u=t.startsWith("./")||t.startsWith("../"),p=l.filter(({Prefix:i})=>t.startsWith(i)),h=(u?[m(r,t)]:p.flatMap(({Prefix:i,Path:d})=>d.map(b=>m(b,t.replace(i,""))))).reduce((i,d)=>i||O(d),null);if(!h)return{file:s,original:t};const f=o?h.file:h.imported,P=(h.type==="file"?_(I(r,y(f)),M(f)):I(r,f)).replace(/^(?!\.+\/)/,i=>`./${i}`).replace(/\.[^/.]*ts[^/.]*$/,i=>i.replace(/\.ts$/,".js").replace(/\.tsx$/,".jsx").replace(/\.mts$/,".mjs").replace(/\.cts$/,".cjs")),T=j(m(e,P))?P:P.replace(/\.jsx$/,".js");return{file:g(s),original:g(t),...t!==T&&{replacement:g(T)}}}function O(t){const s=t.replace(/\.[^/.]*js[^/.]*$/,e=>e.replace("js","ts")),l=t.replace(/\.[^/.]*(js|json)[^/.]*$/,""),n=R.map(e=>`${l}${e}`),o=[t,s,...n].find(e=>j(e));if(o)return{imported:t,file:o,type:"file"};const r=(C(t)?R.map(e=>`${t}/index${e}`):[]).find(e=>j(e));return r?{imported:t,file:r,type:"directory"}:null}function j(t){try{return v(t).isFile()}catch{return!1}}function C(t){try{return v(t).isDirectory()}catch{return!1}}import{existsSync as F,readFileSync as A,statSync as v}from"fs";import{basename as M,dirname as y,join as _,relative as I,resolve as m}from"path";import D from"@Class/Error/FileNotFound";import g from"@Function/Normalize";const X=/((?:require\(|require\.resolve\(|import\()|(?:import|export)\s+(?:[\s\S]*?from\s+)?)['"]([^'"]*)['"]\)?/g,z=/(?:(?:import\()|(?:import|export)\s+(?:[\s\S]*?from\s+)?)['"]([^'"]*)['"]\)?/g,S=/(?:(?:require\(|require\.resolve\()\s+)['"]([^'"]*)['"]\)/g,R=[".js",".jsx",".ts",".tsx",".cjs",".mjs",".mdx",".d.ts",".json"];export{S as COMMONJS_IMPORT_EXPORT_REGEX,z as ESM_IMPORT_EXPORT_REGEX,X as IMPORT_EXPORT_REGEX,$ as aliasToRelativePath,w as default,E as replaceAliasPathsInFile};
