#!/usr/bin/env node
const h=async()=>{const r=(await u()).parse().opts(),o=new d(r.Verbose?"verbose":"info");o.Verbose(),o.Param("options",r);try{const e=y(r.Project),{rootDir:m,outDir:p,baseUrl:c,paths:f}=e.options??{};o.Param("compilerOptions",{rootDir:m,outDir:p,baseUrl:c,paths:f});const t=await I(r,e);o.Param("programPaths",t);const n=await b(t.Base,e?.options?.paths??{});o.Param("aliases",n);const i=await E(t.Target,r.Extension);o.Param("filesToProcess",i);const a=v(i,n,t);o.Param("fileChanges",a.map(({File:l,Change:g})=>({file:l,changes:g}))),r.NoEmit?o.Info(s("Resolve:"),"discovered",a.length,"file(s) for change (none actually changed since --noEmit was given)"):(w(a),o.Info(s("Resolve:"),"changed",a.length,"file(s)"))}catch(e){if(e instanceof P)o.Error(`Error during step '${s(e.Step)}'`,e.message);else throw e}};await h();import{bold as s}from"ansi-colors";import P from"@Class/Error/Step.js";import d from"@Class/Logger.js";import w from"@Function/Apply.js";import b from"@Function/Compute.js";import u from"@Function/Create.js";import v from"@Function/Generate.js";import E from"@Function/Get.js";import y from"@Function/Load.js";import I from"@Function/Resolve/Path.js";export{h as _Function};
