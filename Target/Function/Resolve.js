#!/usr/bin/env node
const d=async()=>{const e=(await(await import("./Create.js")).default()).parse().opts(),t=new(await import("../Class/Logger.js")).default(e.Verbose?"verbose":"info");t.Verbose(),t.Param("options",e);try{const a=(await import("./Load.js")).default(e.Project),{rootDir:c,outDir:l,baseUrl:p,paths:f}=a.options??{};t.Param("compilerOptions",{rootDir:c,outDir:l,baseUrl:p,paths:f});const o=await(await import("./Resolve/Path.js")).default(e,a);t.Param("Path",o);const s=await(await import("./Compute.js")).default(o.Base,a?.options?.paths??{});t.Param("Alias",s);const n=await(await import("./Get.js")).default(o.Target,e.Extension);t.Param("filesToProcess",n);const i=(await import("./Generate.js")).default(n,s,o);t.Param("fileChanges",i.map(({File:m,Change:w})=>({file:m,changes:w}))),e.NoEmit?t.Info(r("Resolve:"),"discovered",i.length,"file(s) for change (none actually changed since --noEmit was given)"):((await import("./Apply.js")).default(i),t.Info(r("Resolve:"),"changed",i.length,"file(s)"))}catch(a){if(a instanceof(await import("../Class/Error/Step.js")).default)t.Error(`Error during step '${r(a.Step)}'`,a.message);else throw a}};await d();const{bold:r}=await import("ansi-colors");export{d as _Function,r as bold};
