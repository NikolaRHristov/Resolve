#!/usr/bin/env node
import{bold as a}from"ansi-colors";import h from"@Class/Logger.js";import P from"@Class/Error/Step.js";import y from"@Function/Create.js";import d from"@Function/Load.js";import v from"@Function/Resolve/Path.js";import b from"@Function/Compute.js";import u from"@Function/Get.js";import E from"@Function/Generate.js";import C from"@Function/Apply.js";const O=()=>{const e=y().parse().opts(),o=new h(e.verbose?"verbose":"info");o.verbose(),o.fancyParams("options",e);try{const r=d(e.project),{rootDir:m,outDir:p,baseUrl:f,paths:c}=r.options??{};o.fancyParams("compilerOptions",{rootDir:m,outDir:p,baseUrl:f,paths:c});const s=v(e,r);o.fancyParams("programPaths",s);const n=b(s.basePath,r?.options?.paths??{});o.fancyParams("aliases",n);const i=u(s.outPath,e.ext);o.fancyParams("filesToProcess",i);const t=E(i,n,s);o.fancyParams("fileChanges",t.map(({file:g,changes:l})=>({file:g,changes:l}))),e.noEmit?o.info(a("Resolve:"),"discovered",t.length,"file(s) for change (none actually changed since --noEmit was given)"):(C(t),o.info(a("Resolve:"),"changed",t.length,"file(s)"))}catch(r){if(r instanceof P)o.fancyError(`Error during step '${a(r.step)}'`,r.message);else throw r}};O();export{O as main};
